spring:
  profiles:
    group:
      "local": "localDB, devPort, secret, web-mvc, jpa-config"
      "dev": "devDB, devPort, secret, web-mvc, jpa-config"
      "prod": "prodDB, prodPort, secret, web-mvc, jpa-config"

---

spring:
  config:
    activate:
      on-profile: "localDB"

  datasource:
    url: ${DATASOURCE_URL_LOCAL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    dbcp2:
      validation-query: select 1
  sql:
    init:
      platform: mysql

---

spring:
  config:
    activate:
      on-profile: "devDB"

  datasource:
    url: ${DATASOURCE_URL_DEV}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    dbcp2:
      validation-query: select 1
  sql:
    init:
      platform: mysql

---

spring:
  config:
    activate:
      on-profile: "prodDB"

  datasource:
    url: ${DATASOURCE_URL_PROD}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    dbcp2:
      validation-query: select 1
  sql:
    init:
      platform: mysql

---

spring:
  config:
    activate:
      on-profile: "devPort"

server:
  port: 9000

---

spring:
  config:
    activate:
      on-profile: "prodPort"

server:
  port: 9001

---

spring:
  config:
    activate:
      on-profile: "secret"

oauth:
  kakao:
    client-id: ${OAUTH_KAKAO_CLIENT_ID}
    url:
      auth: https://kauth.kakao.com
      api: https://kapi.kakao.com

daum:
  url:
    address: https://dapi.kakao.com/v2/local/search/address.json

secret:
  jwt-secret-key: ${JWT_SECRET_KEY}
  jwt-expired-in:
    access-token: ${JWT_EXPIRED_IN}
    refresh-token: ${REFRESH_TOKEN_EXPIRED_IN}

---

spring:
  config:
    activate:
      on-profile: "web-mvc"

  mvc:
    throw-exception-if-no-handler-found: true

  web:
    resources:
      add-mappings: false

  messages:
    basename: errors

---
spring:
  config:
    activate:
      on-profile: "jpa-config"

  jpa:
    open-in-view: true
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: update
    properties:
      hibernate:
#        jdbc:
#          batch_size: 100
#          order_inserts: true
#          order_updates: true
        show_sql: true
        format_sql: true
        default_batch_fetch_size: 100

---
spring:
  data:
    redis:
      host: localhost
      port: 6379

---

cloud:
  aws:
    s3:
      bucket: ${BUCKET_NAME}
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}

---
#logging:
#  level:
#    org.hibernate.orm.jdbc.bind: TRACE          # JPA 쿼리의 파라미터가 표시되도록 (쿼리 뒤에 parameter를 알려줌)
#
#---
#
#crawling:
#  workspace_path: ${CRAWLING_WORKSPACE_PATH}


